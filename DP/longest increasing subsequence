#include <iostream>
#include <vector>
#include <algorithm>

int lengthOfLIS(const std::vector<int>& nums) {
    int n = nums.size();
    if (n == 0) return 0;

    // dp[i] stores the length of LIS ending at index i
    std::vector<int> dp(n, 1);
    int maxLength = 1;

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < i; j++) {
            if (nums[i] > nums[j]) { // Check if nums[i] can extend the sequence at nums[j]
                dp[i] = std::max(dp[i], dp[j] + 1);
            }
        }
        maxLength = std::max(maxLength, dp[i]);
    }

    return maxLength;
}

int main() {
    std::vector<int> nums = {10, 9, 2, 5, 3, 7, 101, 18};
    std::cout << "Length of Longest Increasing Subsequence: " << lengthOfLIS(nums) << std::endl;
    return 0;
}
